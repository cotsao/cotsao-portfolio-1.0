(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{219:function(e,n,t){var content=t(232);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(66).default)("1b30ee58",content,!0,{sourceMap:!1})},231:function(e,n,t){"use strict";t(219)},232:function(e,n,t){var o=t(65)((function(i){return i[1]}));o.push([e.i,"/*purgecss start ignore*/\n#name{\n  font-size:6vw;\n  text-indent:2.6vw;\n  letter-spacing:2.6vw\n}\n#name,#titles{\n  transform:translateY(30px);\n  text-shadow:10px 6px 10px #3d5257;\n  text-transform:uppercase\n}\n#titles{\n  font-size:1vw;\n  letter-spacing:1.8vw\n}\n@media screen and (max-width:600px){\n#name{\n    font-size:12vw\n}\n#titles{\n    font-size:3vw\n}\n}\n\n/*purgecss end ignore*/",""]),o.locals={},e.exports=o},234:function(e,n,t){"use strict";t.r(n);var o=t(17),r=(t(38),t(228),t(31),t(218)),c=t(221),l=t(230),v=t.n(l),d={mounted:function(){var e=this,n={speed:.2,density:1.5,strength:.2,frequency:3,amplitude:6,intensity:0},t="  \n  varying vec2 vUv;\n  varying float vDistort;\n  \n  uniform float uTime;\n  uniform float uSpeed;\n  uniform float uNoiseDensity;\n  uniform float uNoiseStrength;\n  uniform float uFrequency;\n  uniform float uAmplitude;\n  \n  ".concat('\n  // GLSL textureless classic 3D noise "cnoise",\n  // with an RSL-style periodic variant "pnoise".\n  // Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n  // Version: 2011-10-11\n  //\n  // Many thanks to Ian McEwan of Ashima Arts for the\n  // ideas for permutation and gradient selection.\n  //\n  // Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n  // Distributed under the MIT license. See LICENSE file.\n  // https://github.com/ashima/webgl-noise\n  //\n\n  vec3 mod289(vec3 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 mod289(vec4 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 permute(vec4 x)\n  {\n    return mod289(((x*34.0)+1.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  // Classic Perlin noise, periodic variant\n  float pnoise(vec3 P, vec3 rep)\n  {\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n  }\n',"\n  \n  ").concat("\n  mat3 rotation3dY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat3(\n      c, 0.0, -s,\n      0.0, 1.0, 0.0,\n      s, 0.0, c\n    );\n  }\n  \n  vec3 rotateY(vec3 v, float angle) {\n    return rotation3dY(angle) * v;\n  }  \n","\n  \n  void main() {\n    vUv = uv;\n    \n    float t = uTime * uSpeed;\n    float distortion = pnoise((normal + t) * uNoiseDensity, vec3(10.0)) * uNoiseStrength;\n\n    vec3 pos = position + (normal * distortion);\n    float angle = sin(uv.y * uFrequency + t) * uAmplitude;\n    pos = rotateY(pos, angle);    \n    \n    vDistort = distortion;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n  }  \n"),l=new r.Scene,d=new r.PerspectiveCamera(75,innerWidth/innerHeight,.1,1e3);d.position.set(0,0,10);var f=new r.Clock,y=new r.WebGL1Renderer({antialias:!0});y.setPixelRatio(Math.min(devicePixelRatio,1.5)),y.setClearColor("black",1),y.setSize(innerWidth,innerHeight),y.domElement.setAttribute("id","test"),document.querySelector("#scene").appendChild(y.domElement);var m=new v.a(d,y.domElement);m.autoRotate=!0,m.autoRotateSpeed=.3;var x=new r.IcosahedronBufferGeometry(4,64),z=new r.ShaderMaterial({vertexShader:t,fragmentShader:"\n  varying vec2 vUv;\n  varying float vDistort;\n  \n  uniform float uTime;\n  uniform float uIntensity;\n  \n  vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n  }     \n  \n  void main() {\n    float distort = vDistort * uIntensity;\n    \n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.30, 0.20, 0.20);\n  \n    vec3 color = cosPalette(distort, brightness, contrast, oscilation, phase);\n    \n    gl_FragColor = vec4(color, 1.0);\n  }  \n",uniforms:{uTime:{value:0},uSpeed:{value:n.speed},uNoiseDensity:{value:n.density},uNoiseStrength:{value:n.strength},uFrequency:{value:n.frequency},uAmplitude:{value:n.amplitude},uIntensity:{value:n.intensity}}}),h=new r.Mesh(x,z);l.add(h),Array(1500).fill().forEach((function(){var e=new r.SphereGeometry(.25,10,10),n=new r.MeshPhongMaterial({color:16777215}),t=new r.Mesh(e,n),c=Array(3).fill().map((function(){return r.MathUtils.randFloatSpread(500)})),v=Object(o.a)(c,3),d=v[0],f=v[1],y=v[2];t.position.set(d,f,y),l.add(t)}));var w=new r.PointLight(16777215);w.position.set(5,5,5);var P=new r.AmbientLight(16777215);l.add(w,P);var S=!1,_=0;!function animate(){_+=.001,n.intensity=5*Math.abs(Math.sin(_))+2,requestAnimationFrame(animate),y.render(l,d),S||m.update(),h.material.uniforms.uTime.value=f.getElapsedTime(),h.material.uniforms.uSpeed.value=n.speed,h.material.uniforms.uNoiseDensity.value=n.density,h.material.uniforms.uNoiseStrength.value=n.strength,h.material.uniforms.uFrequency.value=n.frequency,h.material.uniforms.uAmplitude.value=n.amplitude,h.material.uniforms.uIntensity.value=n.intensity}(),c.a.to("#name",{opacity:1,duration:2,y:0,delay:1,ease:"expo"}),c.a.to("#titles",{opacity:1,duration:2,delay:1.5,y:0,ease:"expo"}),c.a.to("#button",{opacity:1,duration:2,delay:1.8,y:0,ease:"expo"}),c.a.to("#scene",{opacity:.8,delay:3,duration:2}),document.querySelector("#button").addEventListener("click",(function(n){n.preventDefault(),m.autoRotate=!1,m.reset(),S=!0,c.a.to("#container",{opacity:0,duration:.5}),c.a.to("#scene",{opacity:1,duration:.5}),c.a.to(d.position,{z:25,ease:"power3.inOut",duration:1.5}),c.a.to(d.rotation,{x:1.57,ease:"power3.inOut",duration:1.5}),c.a.to(d.position,{y:300,ease:"power3.in",duration:1.5,delay:1.5,onComplete:function(){e.$router.push("/about")}})})),addEventListener("resize",(function(){var e=innerWidth,n=innerHeight;d.aspect=e/n,y.setSize(e,n),d.updateProjectionMatrix()}))},head:function(){return{title:"Cody Tsao"}}},f=(t(231),t(37)),component=Object(f.a)(d,(function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)}),[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("div",{attrs:{id:"app"}},[t("div",{staticClass:"absolute w-full text-center text-white ",staticStyle:{top:"50%",transform:"translate(-50%,-50%)",left:"50%","z-index":"5"},attrs:{id:"container"}},[t("h1",{staticClass:"opacity-0 pointer-events-none select-none font-raleway",attrs:{id:"name"}},[e._v("\n        Cody Tsao\n      ")]),e._v(" "),t("p",{staticClass:"opacity-0 pointer-events-none select-none font-raleway",attrs:{id:"titles"}},[e._v("\n        Developer | Engineer\n      ")]),e._v(" "),t("button",{staticClass:"px-8 py-4 mt-8 uppercase duration-300 border rounded-lg opacity-0 font-raleway hover:bg-white hover:text-gray-800 ",staticStyle:{transform:"translateY(30px)"},attrs:{id:"button"}},[e._v("\n        View Work\n      ")])])]),e._v(" "),t("div",{staticClass:"opacity-0",attrs:{id:"scene"}})])}],!1,null,null,null);n.default=component.exports}}]);